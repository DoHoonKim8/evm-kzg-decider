use ethereum_types::Address;
use foundry_evm::executor::{fork::MultiFork, Backend, ExecutorBuilder};
use halo2_curves::bn256::{Bn256, Fq, Fr, G1Affine};
use halo2_proofs::{
    circuit::{Layouter, SimpleFloorPlanner, Value},
    dev::MockProver,
    plonk::{
        create_proof, keygen_pk, keygen_vk, verify_proof, Advice, Circuit, Column,
        ConstraintSystem, Error, Fixed, Instance, ProvingKey, VerifyingKey,
    },
    poly::{
        commitment::{Params, ParamsProver},
        kzg::{
            commitment::{KZGCommitmentScheme, ParamsKZG},
            multiopen::{ProverGWC, VerifierGWC},
            strategy::AccumulatorStrategy,
        },
        Rotation, VerificationStrategy,
    },
    transcript::{TranscriptReadBuffer, TranscriptWriterBuffer},
};
use itertools::Itertools;
use plonk_verifier::{
    loader::evm::{encode_calldata, EvmLoader, EvmYulLoader},
    pcs::kzg::{Gwc19, Kzg},
    system::halo2::{
        compile,
        transcript::evm::EvmTranscript,
        transcript::yulevm::EvmYulTranscript,
        Config
    },
    verifier::{self, PlonkVerifier},
};
use rand::{rngs::OsRng, RngCore};
use std::rc::Rc;
use std::fs;
use std::io::prelude::*;

type Plonk = verifier::Plonk<Kzg<Bn256, Gwc19>>;

#[derive(Clone, Copy)]
struct StandardPlonkConfig {
    a: Column<Advice>,
    b: Column<Advice>,
    c: Column<Advice>,
    q_a: Column<Fixed>,
    q_b: Column<Fixed>,
    q_c: Column<Fixed>,
    q_ab: Column<Fixed>,
    constant: Column<Fixed>,
    #[allow(dead_code)]
    instance: Column<Instance>,
}

impl StandardPlonkConfig {
    fn configure(meta: &mut ConstraintSystem<Fr>) -> Self {
        let [a, b, c] = [(); 3].map(|_| meta.advice_column());
        let [q_a, q_b, q_c, q_ab, constant] = [(); 5].map(|_| meta.fixed_column());
        let instance = meta.instance_column();

        [a, b, c].map(|column| meta.enable_equality(column));

        meta.create_gate(
            "q_a·a + q_b·b + q_c·c + q_ab·a·b + constant + instance = 0",
            |meta| {
                let [a, b, c] = [a, b, c].map(|column| meta.query_advice(column, Rotation::cur()));
                let [q_a, q_b, q_c, q_ab, constant] = [q_a, q_b, q_c, q_ab, constant]
                    .map(|column| meta.query_fixed(column, Rotation::cur()));
                let instance = meta.query_instance(instance, Rotation::cur());
                Some(
                    q_a * a.clone()
                        + q_b * b.clone()
                        + q_c * c
                        + q_ab * a * b
                        + constant
                        + instance,
                )
            },
        );

        StandardPlonkConfig {
            a,
            b,
            c,
            q_a,
            q_b,
            q_c,
            q_ab,
            constant,
            instance,
        }
    }
}

#[derive(Clone, Default)]
struct StandardPlonk(Fr);

impl StandardPlonk {
    fn rand<R: RngCore>(mut rng: R) -> Self {
        Self(Fr::from(rng.next_u32() as u64))
    }

    fn num_instance() -> Vec<usize> {
        vec![1]
    }

    fn instances(&self) -> Vec<Vec<Fr>> {
        vec![vec![self.0]]
    }
}

impl Circuit<Fr> for StandardPlonk {
    type Config = StandardPlonkConfig;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self::default()
    }

    fn configure(meta: &mut ConstraintSystem<Fr>) -> Self::Config {
        meta.set_minimum_degree(4);
        StandardPlonkConfig::configure(meta)
    }

    fn synthesize(
        &self,
        config: Self::Config,
        mut layouter: impl Layouter<Fr>,
    ) -> Result<(), Error> {
        layouter.assign_region(
            || "",
            |mut region| {
                region.assign_advice(|| "", config.a, 0, || Value::known(self.0))?;
                region.assign_fixed(|| "", config.q_a, 0, || Value::known(-Fr::one()))?;

                region.assign_advice(|| "", config.a, 1, || Value::known(-Fr::from(5)))?;
                for (idx, column) in (1..).zip([
                    config.q_a,
                    config.q_b,
                    config.q_c,
                    config.q_ab,
                    config.constant,
                ]) {
                    region.assign_fixed(|| "", column, 1, || Value::known(Fr::from(idx)))?;
                }

                let a = region.assign_advice(|| "", config.a, 2, || Value::known(Fr::one()))?;
                a.copy_advice(|| "", &mut region, config.b, 3)?;
                a.copy_advice(|| "", &mut region, config.c, 4)?;

                Ok(())
            },
        )
    }
}

fn gen_srs(k: u32) -> ParamsKZG<Bn256> {
    ParamsKZG::<Bn256>::setup(k, OsRng)
}

fn gen_pk<C: Circuit<Fr>>(params: &ParamsKZG<Bn256>, circuit: &C) -> ProvingKey<G1Affine> {
    let vk = keygen_vk(params, circuit).unwrap();
    keygen_pk(params, vk, circuit).unwrap()
}

fn gen_proof<C: Circuit<Fr>>(
    params: &ParamsKZG<Bn256>,
    pk: &ProvingKey<G1Affine>,
    circuit: C,
    instances: Vec<Vec<Fr>>,
) -> Vec<u8> {
    MockProver::run(params.k(), &circuit, instances.clone())
        .unwrap()
        .assert_satisfied();

    let instances = instances
        .iter()
        .map(|instances| instances.as_slice())
        .collect_vec();
    let proof = {
        let mut transcript = TranscriptWriterBuffer::<_, G1Affine, _>::init(Vec::new());
        create_proof::<KZGCommitmentScheme<Bn256>, ProverGWC<_>, _, _, EvmTranscript<_, _, _, _>, _>(
            params,
            pk,
            &[circuit],
            &[instances.as_slice()],
            OsRng,
            &mut transcript,
        )
        .unwrap();
        transcript.finalize()
    };

    let accept = {
        let mut transcript = TranscriptReadBuffer::<_, G1Affine, _>::init(proof.as_slice());
        VerificationStrategy::<_, VerifierGWC<_>>::finalize(
            verify_proof::<_, VerifierGWC<_>, _, EvmTranscript<_, _, _, _>, _>(
                params.verifier_params(),
                pk.get_vk(),
                AccumulatorStrategy::new(params.verifier_params()),
                &[instances.as_slice()],
                &mut transcript,
            )
            .unwrap(),
        )
    };
    assert!(accept);

    proof
}

fn hex_to_bytes(s: &str) -> Option<Vec<u8>> {
    if s.len() % 2 == 0 {
        (0..s.len())
            .step_by(2)
            .map(|i| s.get(i..i + 2)
                      .and_then(|sub| u8::from_str_radix(sub, 16).ok()))
            .collect()
    } else {
        None
    }
}

fn gen_evm_verifier(
    params: &ParamsKZG<Bn256>,
    vk: &VerifyingKey<G1Affine>,
    num_instance: Vec<usize>,
) -> Vec<u8> {
    let svk = params.get_g()[0].into();
    let dk = (params.g2(), params.s_g2()).into();
    let protocol = compile(
        params,
        vk,
        Config::kzg().with_num_instance(num_instance.clone()),
    );

    let loader = EvmYulLoader::new::<Fq, Fr>();
    let mut transcript = EvmYulTranscript::<_, Rc<EvmYulLoader>, _, _>::new(loader.clone());

    let instances = transcript.load_instances(num_instance);
    let proof = Plonk::read_proof(&svk, &protocol, &instances, &mut transcript).unwrap();
    Plonk::verify(&svk, &dk, &protocol, &instances, &proof).unwrap();

    let code = loader.runtime_code();
    println!("{}", code);
    hex_to_bytes("610023565b600060405190506000810361001857606090505b818101604052919050565b61236d61002f81610004565b8161003a82398181f3fe60017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806000350660a0527f1272abed9b53a1be094c5fa271706a70a1c391cd5b6be65783f86ecb48bb0c6b6080526020358060c0526040358060e0526000848310858310808216925050506000831460008314808217801584811694505050505084828309858485098685820987600382088381148581169550505050505085811695505050506060358061010052608035806101205260008483108583108082169250505060008314600083148082178015848116945050505050848283098584850986858209876003820883811485811695505050505050858116955050505060a035806101405260c035806101605260008483108583108082169250505060008314600083148082178015848116945050505050848283098584850986858209876003820883811485811695505050505050858116955050505061010060802061018052610180517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181066101a052806101c0525060016101e05360216101c0206101e0526101e0517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181066102005280610220525060016102405360216102202061024052610240517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181066102605280610280525060e035806102a05261010035806102c05260008483108583108082169250505060008314600083148082178015848116945050505050848283098584850986858209876003820883811485811695505050505050858116955050505061012035806102e05261014035806103005260008483108583108082169250505060008314600083148082178015848116945050505050848283098584850986858209876003820883811485811695505050505050858116955050505061016035806103205261018035806103405260008483108583108082169250505060008314600083148082178015848116945050505050848283098584850986858209876003820883811485811695505050505050858116955050505060e06102802061036052610360517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001810661038052806103a052506101a035806103c0526101c035806103e0526000848310858310808216925050506000831460008314808217801584811694505050505084828309858485098685820987600382088381148581169550505050505085811695505050506101e035806104005261020035806104205260008483108583108082169250505060008314600083148082178015848116945050505050848283098584850986858209876003820883811485811695505050505050858116955050505061022035806104405261024035806104605260008483108583108082169250505060008314600083148082178015848116945050505050848283098584850986858209876003820883811485811695505050505050858116955050505060e06103a02061048052610480517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181066104a052806104c052508061026035066104e05280610280350661050052806102a0350661052052806102c0350661054052806102e0350661056052806103003506610580528061032035066105a0528061034035066105c0528061036035066105e05280610380350661060052806103a0350661062052806103c0350661064052806103e0350661066052806104003506610680528061042035066106a0528061044035066106c0528061046035066106e0526102406104c02061070052610700517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018106610720528061074052506104803580610760526104a03580610780526000848310858310808216925050506000831460008314808217801584811694505050505084828309858485098685820987600382088381148581169550505050505085811695505050506104c035806107a0526104e035806107c05260008483108583108082169250505060008314600083148082178015848116945050505050848283098584850986858209876003820883811485811695505050505050858116955050505061050035806107e05261052035806108005260008483108583108082169250505060008314600083148082178015848116945050505050848283098584850986858209876003820883811485811695505050505050858116955050505060e06107402061082052610820517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001810661084052806108605250806104a0516104a0510961088052806108805161088051096108a052806108a0516108a051096108c052806108c0516108c051096108e052806108e0516108e0510961090052806109005161090051096109205280610920516109205109610940528061094051610940510961096052807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000610960510861098052807f3033ea246e506e898e97f570caffd704cb0bb460313fb720b29e139e5c10000161098051096109a052807f167a75c0b5cf99621ee13b09c52de6bca1786efc9511b245f233ae54be0a923c6109a051096109c052807f19e9d8b22b6206c7996f0aacbc5371a086bb794be4a7be4b51ae473f31f56dc56104a051086109e052807f2288d9b5356642d0c02f6aaebdf61149a747eb2f5c82959e6a0de29a1ddf34466109a05109610a0052807f0ddb74bdabcb5d58f820db07c38b471380ebfd191d36daf2d9d412f9d220cbbb6104a05108610a2052807f0a4cd1802e9062efb4f3694119d8b1e65030515c5c875ca2cb138b8879c296726109a05109610a4052807f26177cf2b2a13d3a035cdc7567a8a676d80396ec1d3213ee78ce6a0b763d698f6104a05108610a6052807f19419e27a6220ee606dc1808bf76c0690fc0295726798909a988e6a0be03033a6109a05109610a8052807f1722b04b3b0f9143b1742dadc20a97f41873bef1533fe7879a590ef331fcfcc76104a05108610aa052807f1e3cef5e680760be385354b20cfa424b1545b57ee133143343ec8178b2e4ae8b6109a05109610ac052807f12275f14792a3f6b7ffcf1047487161212ee32c998865c5dfff5741b3d1b51766104a05108610ae052807f1f4d7180df5014849825f3c9b0e89d79432c51f48eb5846ae63b433f28aba10b6109a05109610b0052807f1116dcf201e18ba5202a51ecd098bae3e5079653eb03ec265da6b254c7545ef66104a05108610b20528060016109a05109610b4052807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000006104a05108610b60526020610ba0526020610bc0526020610be0526109e051610c00527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff610c20527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610c40528260016020610b8060c0610ba060055afa141692506020610c80526020610ca0526020610cc052610a2051610ce0527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff610d00527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610d20528260016020610c6060c0610c8060055afa141692506020610d60526020610d80526020610da052610a6051610dc0527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff610de0527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610e00528260016020610d4060c0610d6060055afa141692506020610e40526020610e60526020610e8052610aa051610ea0527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff610ec0527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610ee0528260016020610e2060c0610e4060055afa141692506020610f20526020610f40526020610f6052610ae051610f80527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff610fa0527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610fc0528260016020610f0060c0610f2060055afa14169250602061100052602061102052602061104052610b2051611060527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff611080527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016110a0528260016020610fe060c061100060055afa1416925060206110e052602061110052602061112052610b6051611140527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff611160527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016111805282600160206110c060c06110e060055afa1416925060206111c05260206111e05260206112005261098051611220527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593efffffff611240527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016112605282600160206111a060c06111c060055afa1416925080610b80516109c051096112805280610c6051610a0051096112a05280610d4051610a4051096112c05280610e2051610a8051096112e05280610f0051610ac051096113005280610fe051610b00510961132052806110c051610b40510961134052806113405160a051096113605280610540516104e0510961138052806105605161050051096113a052806113a05161138051086113c052806105805161052051096113e052806113e0516113c0510861140052806105a0516104e051096114205280611420516105005109611440528061144051611400510861146052806105c051611460510861148052806113605161148051086114a052806114a05161038051096114c052806106605182036001086114e05280611340516114e051096115005280611500516114c05108611520528061152051610380510961154052806106c0516106c0510961156052806106c0518203611560510861158052806112805161158051096115a052806115a05161154051086115c052806115c05161038051096115e052806106a05182036106c0510861160052806113405161160051096116205280611620516115e051086116405280611640516103805109611660528061128051820360010861168052806112c0516112a051086116a052806112e0516116a051086116c05280611300516116c051086116e05280611320516116e051086117005280611700518203611680510861172052806102005161060051096117405280611740516104e05108611760528061026051611760510861178052806102005161062051096117a052806117a05161050051086117c05280610260516117c051086117e05280611780516117e0510961180052806106805161180051096118205280610200516001096118405280611840516104a051096118605280611860516104e0510861188052806102605161188051086118a05280610200517f09226b6e22c6f0ca64ec26aad4c86e715b5f898e5e963f25870e56bbe533e9a2096118c052806118c0516104a051096118e052806118e0516105005108611900528061026051611900510861192052806118a051611920510961194052806106605161194051096119605280611960518203611820510861198052806117205161198051096119a052806119a05161166051086119c052806119c05161038051096119e05280610200516106405109611a005280611a00516105205108611a20528061026051611a205108611a4052806106e051611a405109611a605280610200517f13b360d4e82fe915fed16081038f98c211427b87a281bd733c277dbadf10372b09611a805280611a80516104a05109611aa05280611aa0516105205108611ac0528061026051611ac05108611ae052806106c051611ae05109611b005280611b00518203611a605108611b20528061172051611b205109611b405280611b40516119e05108611b605280610960516109605109611b80528061096051611b805109611ba0528061096051600109611bc05280611b8051600109611be052806111a051611b605109611c005280610840516108405109611c20528061084051611c205109611c405280610720516107205109611c60528061072051611c605109611c80528061072051611c805109611ca0528061072051611ca05109611cc0528061072051611cc05109611ce0528061072051611ce05109611d00528061072051611d005109611d20528061072051611d205109611d40528061072051611d405109611d60528061072051611d605109611d80528061072051611d805109611da0528061072051611da05109611dc0528061072051611dc05109611de0528061072051611de05109611e00528060016104e051830309611e2052806107205161050051830309611e40528061072051600109611e605280611e4051611e205108611e805280611c605161052051830309611ea05280611c6051600109611ec05280611ea051611e805108611ee05280611c805161066051830309611f005280611c8051600109611f205280611f0051611ee05108611f405280611ca0516106c051830309611f605280611ca051600109611f805280611f6051611f405108611fa05280611cc05161054051830309611fc05280611cc051600109611fe05280611fc051611fa051086120005280611ce051610560518303096120205280611ce05160010961204052806120205161200051086120605280611d0051610580518303096120805280611d00516001096120a052806120805161206051086120c05280611d20516105a0518303096120e05280611d205160010961210052806120e0516120c051086121205280611d40516105c0518303096121405280611d405160010961216052806121405161212051086121805280611d6051610600518303096121a05280611d60516001096121c052806121a05161218051086121e05280611d8051610620518303096122005280611d80516001096122205280612200516121e051086122405280611da051610640518303096122605280611da05160010961228052806122605161224051086122a05280611dc051611c00518303096122c05280611dc0516001096122e05280611dc051611bc051096123005280611dc051611be0510961232052806122c0516122a051086123405280611de0516105e0518303096123605280611de05160010961238052806123605161234051086123a0528060016123a051096123c052806001611e6051096123e052806001611ec0510961240052806001611f20510961242052806001611f80510961244052806001611fe05109612460528060016120405109612480528060016120a051096124a05280600161210051096124c05280600161216051096124e0528060016121c05109612500528060016122205109612520528060016122805109612540528060016122e051096125605280600161230051096125805280600161232051096125a05280600161238051096125c052806001610680518303096125e05280610720516106e0518303096126005280612600516125e051086126205280610840516126205109612640528061084051600109612660528061084051611e6051096126805280612640516123c051086126a052806126605161242051086126c052806126805161244051086126e0528060016106a0518303096127005280611c205161270051096127205280611c20516001096127405280612720516126a051086127605280612740516126c05108612780528060016104a051096127a052806127a0516001096127c052807f1058a83d529be585820b96ff0a13f2dbd8675a9e5dd2336a6692cc1e5a526c816104a051096127e052806127e051612660510961280052807f167a75c0b5cf99621ee13b09c52de6bca1786efc9511b245f233ae54be0a923c6104a05109612820528061282051612740510961284052600161286052600261288052612760516128a0528260016040612860606061286060075afa14169250612860516128c052612880516128e05260c0516129005260e0516129205282600160406128c060806128c060065afa14169250610100516129405261012051612960526123e051612980528260016040612940606061294060075afa141692506128c0516129a0526128e0516129c052612940516129e05261296051612a005282600160406129a060806129a060065afa1416925061014051612a205261016051612a405261240051612a60528260016040612a206060612a2060075afa141692506129a051612a80526129c051612aa052612a2051612ac052612a4051612ae0528260016040612a806080612a8060065afa141692506102a051612b00526102c051612b205261278051612b40528260016040612b006060612b0060075afa14169250612a8051612b6052612aa051612b8052612b0051612ba052612b2051612bc0528260016040612b606080612b6060065afa141692506102e051612be05261030051612c00526126e051612c20528260016040612be06060612be060075afa14169250612b6051612c4052612b8051612c6052612be051612c8052612c0051612ca0528260016040612c406080612c4060065afa141692507f118d1c285344cfc43570035698ff8d639c435015b8ea3878006c3e3c67186b44612cc0527f2e7d106abfa47b5f4eee6beb48979d124aa8877f4411acfd59cb0c7750731ad2612ce05261246051612d00528260016040612cc06060612cc060075afa14169250612c4051612d2052612c6051612d4052612cc051612d6052612ce051612d80528260016040612d206080612d2060065afa141692507f1e9a7a37e084fd3e6f081c7a81ec0e576ca545b3b4e1ff65c78278b6b0396e61612da0527f0600aac71a856c0ba175a2f8b1bf2c578a0dfd1e43d496cc6b571520c1c2bd0e612dc05261248051612de0528260016040612da06060612da060075afa14169250612d2051612e0052612d4051612e2052612da051612e4052612dc051612e60528260016040612e006080612e0060065afa141692507f1377d655c74dc0f0787b42de9758c633164206f49487bafd6db4cc2087f5604b612e80527f1469cd6fae79cf02503c981b41f4aa2398d1a20fd2db70868273a072dfbe5c81612ea0526124a051612ec0528260016040612e806060612e8060075afa14169250612e0051612ee052612e2051612f0052612e8051612f2052612ea051612f40528260016040612ee06080612ee060065afa141692507f01a69e1047d2dd0798824e837dadd7c0f13c4792ee1cbc382c300bba88876796612f60527f19e770dda7fb8993e2a3396a2c57a7e6d6056e18886ef702bc0e39189075ede0612f80526124c051612fa0528260016040612f606060612f6060075afa14169250612ee051612fc052612f0051612fe052612f605161300052612f8051613020528260016040612fc06080612fc060065afa141692507f1b3efcb8b738188dc01e45350bee13bd3d147f9df11aad86958800dab72ac070613040527f27bc4922e76e9be25ff2a664b908bc84f64138cf308cc078401722226b306a3a613060526124e051613080528260016040613040606061304060075afa14169250612fc0516130a052612fe0516130c052613040516130e052613060516131005282600160406130a060806130a060065afa141692507f24ed8507690c259c9342ab8ef6f7aec8ee239ac93d9efefdce405973c9548471613120527f0fb84baaec7f2c32182f1cdea141ec4df6cc7e822bd7b66eba201e28c60238996131405261250051613160528260016040613120606061312060075afa141692506130a051613180526130c0516131a052613120516131c052613140516131e0528260016040613180608061318060065afa141692507f0f45e97df98eae7a7212bf650ded234cf1571aea7a39c920055b19b7c1a8aedd613200527f06e97102c6667a97cae4fea3a1238265d7efe93f0c91ce2d010ef020f546f7036132205261252051613240528260016040613200606061320060075afa1416925061318051613260526131a05161328052613200516132a052613220516132c0528260016040613260608061326060065afa141692507f0f702913dc06dfd6209e812236ab2b528100eaaab7b2ed21c48adb7b7994a9fd6132e0527f16bdb7c21fcd43f33d5a0e4a99106cb863e36589bdaf1573b12f27ee726280e361330052612540516133205282600160406132e060606132e060075afa14169250613260516133405261328051613360526132e05161338052613300516133a0528260016040613340608061334060065afa141692506103c0516133c0526103e0516133e052612560516134005282600160406133c060606133c060075afa14169250613340516134205261336051613440526133c051613460526133e051613480528260016040613420608061342060065afa14169250610400516134a052610420516134c052612580516134e05282600160406134a060606134a060075afa14169250613420516135005261344051613520526134a051613540526134c051613560528260016040613500608061350060065afa141692506104405161358052610460516135a0526125a0516135c0528260016040613580606061358060075afa14169250613500516135e052613520516136005261358051613620526135a0516136405282600160406135e060806135e060065afa14169250610320516136605261034051613680526125c0516136a0528260016040613660606061366060075afa141692506135e0516136c052613600516136e0526136605161370052613680516137205282600160406136c060806136c060065afa14169250610760516137405261078051613760526127c051613780528260016040613740606061374060075afa141692506136c0516137a0526136e0516137c052613740516137e052613760516138005282600160406137a060806137a060065afa141692506107a051613820526107c0516138405261280051613860528260016040613820606061382060075afa141692506137a051613880526137c0516138a052613820516138c052613840516138e0528260016040613880608061388060065afa141692506107e05161390052610800516139205261284051613940528260016040613900606061390060075afa1416925061388051613960526138a05161398052613900516139a052613920516139c0528260016040613960608061396060065afa141692506107a0516139e0526107c051613a005261266051613a205282600160406139e060606139e060075afa1416925061076051613a405261078051613a60526139e051613a8052613a0051613aa0528260016040613a406080613a4060065afa141692506107e051613ac05261080051613ae05261274051613b00528260016040613ac06060613ac060075afa14169250613a4051613b2052613a6051613b4052613ac051613b6052613ae051613b80528260016040613b206080613b2060065afa1416925061396051613ba05261398051613bc0527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2613be0527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed613c00527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b613c20527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa613c4052613b2051613c6052613b4051613c80527e11afa7e90e2f41406a57c8aa82586f7861e98c6f44c710fe310eba7dcd1b58613ca0527f17fb531546eb6f5baaa69dc28820b47761b7bca247180642897c633b98e35b0e613cc0527f2eb1dba1e2c52522d405f93dd92cd3af80dc346eae95774e1cda673dd5d2d425613ce0527f05a2ee78bddc41035ebaffcda1d4f6a7e5120909ae70ba793a3be8c65555ac8d613d00528260016020613ba0610180613ba060085afa14169250826001613ba051141692508261236857600080fd5b600080f3").unwrap()
}

fn evm_verify(deployment_code: Vec<u8>, instances: Vec<Vec<Fr>>, proof: Vec<u8>) {
    let calldata = encode_calldata(&instances, &proof);
    let success = {
        let mut evm = ExecutorBuilder::default()
            .with_gas_limit(u64::MAX.into())
            .build(Backend::new(MultiFork::new().0, None));

        let caller = Address::from_low_u64_be(0xfe);
        let verifier = evm
            .deploy(caller, deployment_code.into(), 0.into(), None)
            .unwrap()
            .address;
        let result = evm
            .call_raw(caller, verifier, calldata.into(), 0.into())
            .unwrap();

        dbg!(result.exit_reason);
        dbg!(result.gas_used);

        !result.reverted
    };
    assert!(success);
}

fn main() {
    let params = gen_srs(8);

    let circuit = StandardPlonk::rand(OsRng);
    let pk = gen_pk(&params, &circuit);
    let deployment_code = gen_evm_verifier(&params, pk.get_vk(), StandardPlonk::num_instance());

    let proof = gen_proof(&params, &pk, circuit.clone(), circuit.instances());
    evm_verify(deployment_code, circuit.instances(), proof);
}
