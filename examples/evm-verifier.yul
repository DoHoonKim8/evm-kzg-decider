object "plonk_verifier" {
            code {
                function allocate(size) -> ptr {
                    ptr := mload(0x40)
                    if eq(ptr, 0) { ptr := 0x60 }
                    mstore(0x40, add(ptr, size))
                }
                let size := datasize("Runtime")
                let offset := allocate(size)
                datacopy(offset, dataoffset("Runtime"), size)
                return(offset, size)
            }

            object "Runtime" {
                code {
                    function allocate(size) -> ptr {
                        ptr := mload(0x40)
                        if eq(ptr, 0) { ptr := 0x60 }
                        mstore(0x40, add(ptr, size))
                    }

                    let success:bool := true
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    mstore(0xa0, mod(calldataload(0x0), f_q))
mstore(0x80, 8344238444374001443494842355133312528586389024817276619223149675973229349995)

        {
            let x := calldataload(0x20)
            mstore(0xc0, x)
            let y := calldataload(0x40)
            mstore(0xe0, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }

        {
            let x := calldataload(0x60)
            mstore(0x100, x)
            let y := calldataload(0x80)
            mstore(0x120, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }

        {
            let x := calldataload(0xa0)
            mstore(0x140, x)
            let y := calldataload(0xc0)
            mstore(0x160, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }
mstore(0x180, keccak256(0x80, 256))
{
            let hash := mload(384)
            mstore(416, mod(hash, 21888242871839275222246405745257275088548364400416034343698204186575808495617))
            mstore(448, hash)
        }
mstore8(480, 1)
mstore(0x1e0, keccak256(0x1c0, 33))
{
            let hash := mload(480)
            mstore(512, mod(hash, 21888242871839275222246405745257275088548364400416034343698204186575808495617))
            mstore(544, hash)
        }
mstore8(576, 1)
mstore(0x240, keccak256(0x220, 33))
{
            let hash := mload(576)
            mstore(608, mod(hash, 21888242871839275222246405745257275088548364400416034343698204186575808495617))
            mstore(640, hash)
        }

        {
            let x := calldataload(0xe0)
            mstore(0x2a0, x)
            let y := calldataload(0x100)
            mstore(0x2c0, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }

        {
            let x := calldataload(0x120)
            mstore(0x2e0, x)
            let y := calldataload(0x140)
            mstore(0x300, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }

        {
            let x := calldataload(0x160)
            mstore(0x320, x)
            let y := calldataload(0x180)
            mstore(0x340, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }
mstore(0x360, keccak256(0x280, 224))
{
            let hash := mload(864)
            mstore(896, mod(hash, 21888242871839275222246405745257275088548364400416034343698204186575808495617))
            mstore(928, hash)
        }

        {
            let x := calldataload(0x1a0)
            mstore(0x3c0, x)
            let y := calldataload(0x1c0)
            mstore(0x3e0, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }

        {
            let x := calldataload(0x1e0)
            mstore(0x400, x)
            let y := calldataload(0x200)
            mstore(0x420, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }

        {
            let x := calldataload(0x220)
            mstore(0x440, x)
            let y := calldataload(0x240)
            mstore(0x460, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }
mstore(0x480, keccak256(0x3a0, 224))
{
            let hash := mload(1152)
            mstore(1184, mod(hash, 21888242871839275222246405745257275088548364400416034343698204186575808495617))
            mstore(1216, hash)
        }
mstore(0x4e0, mod(calldataload(0x260), f_q))
mstore(0x500, mod(calldataload(0x280), f_q))
mstore(0x520, mod(calldataload(0x2a0), f_q))
mstore(0x540, mod(calldataload(0x2c0), f_q))
mstore(0x560, mod(calldataload(0x2e0), f_q))
mstore(0x580, mod(calldataload(0x300), f_q))
mstore(0x5a0, mod(calldataload(0x320), f_q))
mstore(0x5c0, mod(calldataload(0x340), f_q))
mstore(0x5e0, mod(calldataload(0x360), f_q))
mstore(0x600, mod(calldataload(0x380), f_q))
mstore(0x620, mod(calldataload(0x3a0), f_q))
mstore(0x640, mod(calldataload(0x3c0), f_q))
mstore(0x660, mod(calldataload(0x3e0), f_q))
mstore(0x680, mod(calldataload(0x400), f_q))
mstore(0x6a0, mod(calldataload(0x420), f_q))
mstore(0x6c0, mod(calldataload(0x440), f_q))
mstore(0x6e0, mod(calldataload(0x460), f_q))
mstore(0x700, keccak256(0x4c0, 576))
{
            let hash := mload(1792)
            mstore(1824, mod(hash, 21888242871839275222246405745257275088548364400416034343698204186575808495617))
            mstore(1856, hash)
        }

        {
            let x := calldataload(0x480)
            mstore(0x760, x)
            let y := calldataload(0x4a0)
            mstore(0x780, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }

        {
            let x := calldataload(0x4c0)
            mstore(0x7a0, x)
            let y := calldataload(0x4e0)
            mstore(0x7c0, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }

        {
            let x := calldataload(0x500)
            mstore(0x7e0, x)
            let y := calldataload(0x520)
            mstore(0x800, y)
            {
            let valid:bool
            {
                let x_lt_p:bool := lt(x, f_p)
                let y_lt_p:bool := lt(y, f_p)
                valid := and(x_lt_p, y_lt_p)
            }
            {
                let x_is_zero:bool := eq(x, 0)
                let y_is_zero:bool := eq(y, 0)
                let x_or_y_is_zero:bool := or(x_is_zero, y_is_zero)
                let x_and_y_is_not_zero:bool := not(x_or_y_is_zero)
                valid := and(x_and_y_is_not_zero, valid)
            }
            {
                let y_square := mulmod(y, y, f_p)
                let x_square := mulmod(x, x, f_p)
                let x_cube := mulmod(x_square, x, f_p)
                let x_cube_plus_3 := addmod(x_cube, 3, f_p)
                let y_square_eq_x_cube_plus_3:bool := eq(x_cube_plus_3, y_square)
                valid := and(y_square_eq_x_cube_plus_3, valid)
            }
            success := and(valid, success)
        }
        }
mstore(0x820, keccak256(0x740, 224))
{
            let hash := mload(2080)
            mstore(2112, mod(hash, 21888242871839275222246405745257275088548364400416034343698204186575808495617))
            mstore(2144, hash)
        }
mstore(0x880, mulmod(mload(0x4a0), mload(0x4a0), f_q))
mstore(0x8a0, mulmod(mload(0x880), mload(0x880), f_q))
mstore(0x8c0, mulmod(mload(0x8a0), mload(0x8a0), f_q))
mstore(0x8e0, mulmod(mload(0x8c0), mload(0x8c0), f_q))
mstore(0x900, mulmod(mload(0x8e0), mload(0x8e0), f_q))
mstore(0x920, mulmod(mload(0x900), mload(0x900), f_q))
mstore(0x940, mulmod(mload(0x920), mload(0x920), f_q))
mstore(0x960, mulmod(mload(0x940), mload(0x940), f_q))
mstore(0x980, addmod(mload(0x960), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x9a0, mulmod(mload(0x980), 21802741923121153053409505722814863857733722351976909209543133076471996743681, f_q))
mstore(0x9c0, mulmod(mload(0x9a0), 10167250710514084151592399827148084713285735496006016499965216114801401041468, f_q))
mstore(0x9e0, addmod(mload(0x4a0), 11720992161325191070654005918109190375262628904410017843732988071774407454149, f_q))
mstore(0xa00, mulmod(mload(0x9a0), 15620430616972136973029697708057142747056669543503469918700292712864029815878, f_q))
mstore(0xa20, addmod(mload(0x4a0), 6267812254867138249216708037200132341491694856912564424997911473711778679739, f_q))
mstore(0xa40, mulmod(mload(0x9a0), 4658854783519236281304787251426829785380272013053939496434657852755686889074, f_q))
mstore(0xa60, addmod(mload(0x4a0), 17229388088320038940941618493830445303168092387362094847263546333820121606543, f_q))
mstore(0xa80, mulmod(mload(0x9a0), 11423757818648818765461327411617109120243501240676889555478397529313037714234, f_q))
mstore(0xaa0, addmod(mload(0x4a0), 10464485053190456456785078333640165968304863159739144788219806657262770781383, f_q))
mstore(0xac0, mulmod(mload(0x9a0), 13677048343952077794467995888380402608453928821079198134318291065290235358859, f_q))
mstore(0xae0, addmod(mload(0x4a0), 8211194527887197427778409856876872480094435579336836209379913121285573136758, f_q))
mstore(0xb00, mulmod(mload(0x9a0), 14158528901797138466244491986759313854666262535363044392173788062030301470987, f_q))
mstore(0xb20, addmod(mload(0x4a0), 7729713970042136756001913758497961233882101865052989951524416124545507024630, f_q))
mstore(0xb40, mulmod(mload(0x9a0), 1, f_q))
mstore(0xb60, addmod(mload(0x4a0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xba0, 32)
mstore(0xbc0, 32)
mstore(0xbe0, 32)
mstore(0xc00, mload(0x9e0))
mstore(0xc20, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0xc40, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0xba0, 192, 0xb80, 32), 1), success)
mstore(0xc80, 32)
mstore(0xca0, 32)
mstore(0xcc0, 32)
mstore(0xce0, mload(0xa20))
mstore(0xd00, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0xd20, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0xc80, 192, 0xc60, 32), 1), success)
mstore(0xd60, 32)
mstore(0xd80, 32)
mstore(0xda0, 32)
mstore(0xdc0, mload(0xa60))
mstore(0xde0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0xe00, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0xd60, 192, 0xd40, 32), 1), success)
mstore(0xe40, 32)
mstore(0xe60, 32)
mstore(0xe80, 32)
mstore(0xea0, mload(0xaa0))
mstore(0xec0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0xee0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0xe40, 192, 0xe20, 32), 1), success)
mstore(0xf20, 32)
mstore(0xf40, 32)
mstore(0xf60, 32)
mstore(0xf80, mload(0xae0))
mstore(0xfa0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0xfc0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0xf20, 192, 0xf00, 32), 1), success)
mstore(0x1000, 32)
mstore(0x1020, 32)
mstore(0x1040, 32)
mstore(0x1060, mload(0xb20))
mstore(0x1080, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x10a0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x1000, 192, 0xfe0, 32), 1), success)
mstore(0x10e0, 32)
mstore(0x1100, 32)
mstore(0x1120, 32)
mstore(0x1140, mload(0xb60))
mstore(0x1160, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1180, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x10e0, 192, 0x10c0, 32), 1), success)
mstore(0x11c0, 32)
mstore(0x11e0, 32)
mstore(0x1200, 32)
mstore(0x1220, mload(0x980))
mstore(0x1240, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x1260, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x11c0, 192, 0x11a0, 32), 1), success)
mstore(0x1280, mulmod(mload(0x9c0), mload(0xb80), f_q))
mstore(0x12a0, mulmod(mload(0xa00), mload(0xc60), f_q))
mstore(0x12c0, mulmod(mload(0xa40), mload(0xd40), f_q))
mstore(0x12e0, mulmod(mload(0xa80), mload(0xe20), f_q))
mstore(0x1300, mulmod(mload(0xac0), mload(0xf00), f_q))
mstore(0x1320, mulmod(mload(0xb00), mload(0xfe0), f_q))
mstore(0x1340, mulmod(mload(0xb40), mload(0x10c0), f_q))
mstore(0x1360, mulmod(mload(0xa0), mload(0x1340), f_q))
mstore(0x1380, mulmod(mload(0x4e0), mload(0x540), f_q))
mstore(0x13a0, mulmod(mload(0x500), mload(0x560), f_q))
mstore(0x13c0, addmod(mload(0x1380), mload(0x13a0), f_q))
mstore(0x13e0, mulmod(mload(0x520), mload(0x580), f_q))
mstore(0x1400, addmod(mload(0x13c0), mload(0x13e0), f_q))
mstore(0x1420, mulmod(mload(0x4e0), mload(0x5a0), f_q))
mstore(0x1440, mulmod(mload(0x500), mload(0x1420), f_q))
mstore(0x1460, addmod(mload(0x1400), mload(0x1440), f_q))
mstore(0x1480, addmod(mload(0x1460), mload(0x5c0), f_q))
mstore(0x14a0, addmod(mload(0x1480), mload(0x1360), f_q))
mstore(0x14c0, mulmod(mload(0x380), mload(0x14a0), f_q))
mstore(0x14e0, addmod(1, sub(f_q, mload(0x660)), f_q))
mstore(0x1500, mulmod(mload(0x14e0), mload(0x1340), f_q))
mstore(0x1520, addmod(mload(0x14c0), mload(0x1500), f_q))
mstore(0x1540, mulmod(mload(0x380), mload(0x1520), f_q))
mstore(0x1560, mulmod(mload(0x6c0), mload(0x6c0), f_q))
mstore(0x1580, addmod(mload(0x1560), sub(f_q, mload(0x6c0)), f_q))
mstore(0x15a0, mulmod(mload(0x1580), mload(0x1280), f_q))
mstore(0x15c0, addmod(mload(0x1540), mload(0x15a0), f_q))
mstore(0x15e0, mulmod(mload(0x380), mload(0x15c0), f_q))
mstore(0x1600, addmod(mload(0x6c0), sub(f_q, mload(0x6a0)), f_q))
mstore(0x1620, mulmod(mload(0x1600), mload(0x1340), f_q))
mstore(0x1640, addmod(mload(0x15e0), mload(0x1620), f_q))
mstore(0x1660, mulmod(mload(0x380), mload(0x1640), f_q))
mstore(0x1680, addmod(1, sub(f_q, mload(0x1280)), f_q))
mstore(0x16a0, addmod(mload(0x12a0), mload(0x12c0), f_q))
mstore(0x16c0, addmod(mload(0x16a0), mload(0x12e0), f_q))
mstore(0x16e0, addmod(mload(0x16c0), mload(0x1300), f_q))
mstore(0x1700, addmod(mload(0x16e0), mload(0x1320), f_q))
mstore(0x1720, addmod(mload(0x1680), sub(f_q, mload(0x1700)), f_q))
mstore(0x1740, mulmod(mload(0x600), mload(0x200), f_q))
mstore(0x1760, addmod(mload(0x4e0), mload(0x1740), f_q))
mstore(0x1780, addmod(mload(0x1760), mload(0x260), f_q))
mstore(0x17a0, mulmod(mload(0x620), mload(0x200), f_q))
mstore(0x17c0, addmod(mload(0x500), mload(0x17a0), f_q))
mstore(0x17e0, addmod(mload(0x17c0), mload(0x260), f_q))
mstore(0x1800, mulmod(mload(0x17e0), mload(0x1780), f_q))
mstore(0x1820, mulmod(mload(0x1800), mload(0x680), f_q))
mstore(0x1840, mulmod(1, mload(0x200), f_q))
mstore(0x1860, mulmod(mload(0x4a0), mload(0x1840), f_q))
mstore(0x1880, addmod(mload(0x4e0), mload(0x1860), f_q))
mstore(0x18a0, addmod(mload(0x1880), mload(0x260), f_q))
mstore(0x18c0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x200), f_q))
mstore(0x18e0, mulmod(mload(0x4a0), mload(0x18c0), f_q))
mstore(0x1900, addmod(mload(0x500), mload(0x18e0), f_q))
mstore(0x1920, addmod(mload(0x1900), mload(0x260), f_q))
mstore(0x1940, mulmod(mload(0x1920), mload(0x18a0), f_q))
mstore(0x1960, mulmod(mload(0x1940), mload(0x660), f_q))
mstore(0x1980, addmod(mload(0x1820), sub(f_q, mload(0x1960)), f_q))
mstore(0x19a0, mulmod(mload(0x1980), mload(0x1720), f_q))
mstore(0x19c0, addmod(mload(0x1660), mload(0x19a0), f_q))
mstore(0x19e0, mulmod(mload(0x380), mload(0x19c0), f_q))
mstore(0x1a00, mulmod(mload(0x640), mload(0x200), f_q))
mstore(0x1a20, addmod(mload(0x520), mload(0x1a00), f_q))
mstore(0x1a40, addmod(mload(0x1a20), mload(0x260), f_q))
mstore(0x1a60, mulmod(mload(0x1a40), mload(0x6e0), f_q))
mstore(0x1a80, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x200), f_q))
mstore(0x1aa0, mulmod(mload(0x4a0), mload(0x1a80), f_q))
mstore(0x1ac0, addmod(mload(0x520), mload(0x1aa0), f_q))
mstore(0x1ae0, addmod(mload(0x1ac0), mload(0x260), f_q))
mstore(0x1b00, mulmod(mload(0x1ae0), mload(0x6c0), f_q))
mstore(0x1b20, addmod(mload(0x1a60), sub(f_q, mload(0x1b00)), f_q))
mstore(0x1b40, mulmod(mload(0x1b20), mload(0x1720), f_q))
mstore(0x1b60, addmod(mload(0x19e0), mload(0x1b40), f_q))
mstore(0x1b80, mulmod(mload(0x960), mload(0x960), f_q))
mstore(0x1ba0, mulmod(mload(0x1b80), mload(0x960), f_q))
mstore(0x1bc0, mulmod(1, mload(0x960), f_q))
mstore(0x1be0, mulmod(1, mload(0x1b80), f_q))
mstore(0x1c00, mulmod(mload(0x1b60), mload(0x11a0), f_q))
mstore(0x1c20, mulmod(mload(0x840), mload(0x840), f_q))
mstore(0x1c40, mulmod(mload(0x1c20), mload(0x840), f_q))
mstore(0x1c60, mulmod(mload(0x720), mload(0x720), f_q))
mstore(0x1c80, mulmod(mload(0x1c60), mload(0x720), f_q))
mstore(0x1ca0, mulmod(mload(0x1c80), mload(0x720), f_q))
mstore(0x1cc0, mulmod(mload(0x1ca0), mload(0x720), f_q))
mstore(0x1ce0, mulmod(mload(0x1cc0), mload(0x720), f_q))
mstore(0x1d00, mulmod(mload(0x1ce0), mload(0x720), f_q))
mstore(0x1d20, mulmod(mload(0x1d00), mload(0x720), f_q))
mstore(0x1d40, mulmod(mload(0x1d20), mload(0x720), f_q))
mstore(0x1d60, mulmod(mload(0x1d40), mload(0x720), f_q))
mstore(0x1d80, mulmod(mload(0x1d60), mload(0x720), f_q))
mstore(0x1da0, mulmod(mload(0x1d80), mload(0x720), f_q))
mstore(0x1dc0, mulmod(mload(0x1da0), mload(0x720), f_q))
mstore(0x1de0, mulmod(mload(0x1dc0), mload(0x720), f_q))
mstore(0x1e00, mulmod(mload(0x1de0), mload(0x720), f_q))
mstore(0x1e20, mulmod(sub(f_q, mload(0x4e0)), 1, f_q))
mstore(0x1e40, mulmod(sub(f_q, mload(0x500)), mload(0x720), f_q))
mstore(0x1e60, mulmod(1, mload(0x720), f_q))
mstore(0x1e80, addmod(mload(0x1e20), mload(0x1e40), f_q))
mstore(0x1ea0, mulmod(sub(f_q, mload(0x520)), mload(0x1c60), f_q))
mstore(0x1ec0, mulmod(1, mload(0x1c60), f_q))
mstore(0x1ee0, addmod(mload(0x1e80), mload(0x1ea0), f_q))
mstore(0x1f00, mulmod(sub(f_q, mload(0x660)), mload(0x1c80), f_q))
mstore(0x1f20, mulmod(1, mload(0x1c80), f_q))
mstore(0x1f40, addmod(mload(0x1ee0), mload(0x1f00), f_q))
mstore(0x1f60, mulmod(sub(f_q, mload(0x6c0)), mload(0x1ca0), f_q))
mstore(0x1f80, mulmod(1, mload(0x1ca0), f_q))
mstore(0x1fa0, addmod(mload(0x1f40), mload(0x1f60), f_q))
mstore(0x1fc0, mulmod(sub(f_q, mload(0x540)), mload(0x1cc0), f_q))
mstore(0x1fe0, mulmod(1, mload(0x1cc0), f_q))
mstore(0x2000, addmod(mload(0x1fa0), mload(0x1fc0), f_q))
mstore(0x2020, mulmod(sub(f_q, mload(0x560)), mload(0x1ce0), f_q))
mstore(0x2040, mulmod(1, mload(0x1ce0), f_q))
mstore(0x2060, addmod(mload(0x2000), mload(0x2020), f_q))
mstore(0x2080, mulmod(sub(f_q, mload(0x580)), mload(0x1d00), f_q))
mstore(0x20a0, mulmod(1, mload(0x1d00), f_q))
mstore(0x20c0, addmod(mload(0x2060), mload(0x2080), f_q))
mstore(0x20e0, mulmod(sub(f_q, mload(0x5a0)), mload(0x1d20), f_q))
mstore(0x2100, mulmod(1, mload(0x1d20), f_q))
mstore(0x2120, addmod(mload(0x20c0), mload(0x20e0), f_q))
mstore(0x2140, mulmod(sub(f_q, mload(0x5c0)), mload(0x1d40), f_q))
mstore(0x2160, mulmod(1, mload(0x1d40), f_q))
mstore(0x2180, addmod(mload(0x2120), mload(0x2140), f_q))
mstore(0x21a0, mulmod(sub(f_q, mload(0x600)), mload(0x1d60), f_q))
mstore(0x21c0, mulmod(1, mload(0x1d60), f_q))
mstore(0x21e0, addmod(mload(0x2180), mload(0x21a0), f_q))
mstore(0x2200, mulmod(sub(f_q, mload(0x620)), mload(0x1d80), f_q))
mstore(0x2220, mulmod(1, mload(0x1d80), f_q))
mstore(0x2240, addmod(mload(0x21e0), mload(0x2200), f_q))
mstore(0x2260, mulmod(sub(f_q, mload(0x640)), mload(0x1da0), f_q))
mstore(0x2280, mulmod(1, mload(0x1da0), f_q))
mstore(0x22a0, addmod(mload(0x2240), mload(0x2260), f_q))
mstore(0x22c0, mulmod(sub(f_q, mload(0x1c00)), mload(0x1dc0), f_q))
mstore(0x22e0, mulmod(1, mload(0x1dc0), f_q))
mstore(0x2300, mulmod(mload(0x1bc0), mload(0x1dc0), f_q))
mstore(0x2320, mulmod(mload(0x1be0), mload(0x1dc0), f_q))
mstore(0x2340, addmod(mload(0x22a0), mload(0x22c0), f_q))
mstore(0x2360, mulmod(sub(f_q, mload(0x5e0)), mload(0x1de0), f_q))
mstore(0x2380, mulmod(1, mload(0x1de0), f_q))
mstore(0x23a0, addmod(mload(0x2340), mload(0x2360), f_q))
mstore(0x23c0, mulmod(mload(0x23a0), 1, f_q))
mstore(0x23e0, mulmod(mload(0x1e60), 1, f_q))
mstore(0x2400, mulmod(mload(0x1ec0), 1, f_q))
mstore(0x2420, mulmod(mload(0x1f20), 1, f_q))
mstore(0x2440, mulmod(mload(0x1f80), 1, f_q))
mstore(0x2460, mulmod(mload(0x1fe0), 1, f_q))
mstore(0x2480, mulmod(mload(0x2040), 1, f_q))
mstore(0x24a0, mulmod(mload(0x20a0), 1, f_q))
mstore(0x24c0, mulmod(mload(0x2100), 1, f_q))
mstore(0x24e0, mulmod(mload(0x2160), 1, f_q))
mstore(0x2500, mulmod(mload(0x21c0), 1, f_q))
mstore(0x2520, mulmod(mload(0x2220), 1, f_q))
mstore(0x2540, mulmod(mload(0x2280), 1, f_q))
mstore(0x2560, mulmod(mload(0x22e0), 1, f_q))
mstore(0x2580, mulmod(mload(0x2300), 1, f_q))
mstore(0x25a0, mulmod(mload(0x2320), 1, f_q))
mstore(0x25c0, mulmod(mload(0x2380), 1, f_q))
mstore(0x25e0, mulmod(sub(f_q, mload(0x680)), 1, f_q))
mstore(0x2600, mulmod(sub(f_q, mload(0x6e0)), mload(0x720), f_q))
mstore(0x2620, addmod(mload(0x25e0), mload(0x2600), f_q))
mstore(0x2640, mulmod(mload(0x2620), mload(0x840), f_q))
mstore(0x2660, mulmod(1, mload(0x840), f_q))
mstore(0x2680, mulmod(mload(0x1e60), mload(0x840), f_q))
mstore(0x26a0, addmod(mload(0x23c0), mload(0x2640), f_q))
mstore(0x26c0, addmod(mload(0x2420), mload(0x2660), f_q))
mstore(0x26e0, addmod(mload(0x2440), mload(0x2680), f_q))
mstore(0x2700, mulmod(sub(f_q, mload(0x6a0)), 1, f_q))
mstore(0x2720, mulmod(mload(0x2700), mload(0x1c20), f_q))
mstore(0x2740, mulmod(1, mload(0x1c20), f_q))
mstore(0x2760, addmod(mload(0x26a0), mload(0x2720), f_q))
mstore(0x2780, addmod(mload(0x26c0), mload(0x2740), f_q))
mstore(0x27a0, mulmod(mload(0x4a0), 1, f_q))
mstore(0x27c0, mulmod(1, mload(0x27a0), f_q))
mstore(0x27e0, mulmod(mload(0x4a0), 7393649265675507591155086225434297871937368251641985215568891852805958167681, f_q))
mstore(0x2800, mulmod(mload(0x2660), mload(0x27e0), f_q))
mstore(0x2820, mulmod(mload(0x4a0), 10167250710514084151592399827148084713285735496006016499965216114801401041468, f_q))
mstore(0x2840, mulmod(mload(0x2740), mload(0x2820), f_q))
mstore(0x2860, 1)
                    mstore(0x2880, 2)
mstore(0x28a0, mload(0x2760))
success := and(eq(staticcall(gas(), 0x7, 0x2860, 96, 0x2860, 64), 1), success)
mstore(0x28c0, mload(0x2860))
                    mstore(0x28e0, mload(0x2880))
mstore(0x2900, mload(0xc0))
                    mstore(0x2920, mload(0xe0))
success := and(eq(staticcall(gas(), 0x6, 0x28c0, 128, 0x28c0, 64), 1), success)
mstore(0x2940, mload(0x100))
                    mstore(0x2960, mload(0x120))
mstore(0x2980, mload(0x23e0))
success := and(eq(staticcall(gas(), 0x7, 0x2940, 96, 0x2940, 64), 1), success)
mstore(0x29a0, mload(0x28c0))
                    mstore(0x29c0, mload(0x28e0))
mstore(0x29e0, mload(0x2940))
                    mstore(0x2a00, mload(0x2960))
success := and(eq(staticcall(gas(), 0x6, 0x29a0, 128, 0x29a0, 64), 1), success)
mstore(0x2a20, mload(0x140))
                    mstore(0x2a40, mload(0x160))
mstore(0x2a60, mload(0x2400))
success := and(eq(staticcall(gas(), 0x7, 0x2a20, 96, 0x2a20, 64), 1), success)
mstore(0x2a80, mload(0x29a0))
                    mstore(0x2aa0, mload(0x29c0))
mstore(0x2ac0, mload(0x2a20))
                    mstore(0x2ae0, mload(0x2a40))
success := and(eq(staticcall(gas(), 0x6, 0x2a80, 128, 0x2a80, 64), 1), success)
mstore(0x2b00, mload(0x2a0))
                    mstore(0x2b20, mload(0x2c0))
mstore(0x2b40, mload(0x2780))
success := and(eq(staticcall(gas(), 0x7, 0x2b00, 96, 0x2b00, 64), 1), success)
mstore(0x2b60, mload(0x2a80))
                    mstore(0x2b80, mload(0x2aa0))
mstore(0x2ba0, mload(0x2b00))
                    mstore(0x2bc0, mload(0x2b20))
success := and(eq(staticcall(gas(), 0x6, 0x2b60, 128, 0x2b60, 64), 1), success)
mstore(0x2be0, mload(0x2e0))
                    mstore(0x2c00, mload(0x300))
mstore(0x2c20, mload(0x26e0))
success := and(eq(staticcall(gas(), 0x7, 0x2be0, 96, 0x2be0, 64), 1), success)
mstore(0x2c40, mload(0x2b60))
                    mstore(0x2c60, mload(0x2b80))
mstore(0x2c80, mload(0x2be0))
                    mstore(0x2ca0, mload(0x2c00))
success := and(eq(staticcall(gas(), 0x6, 0x2c40, 128, 0x2c40, 64), 1), success)
mstore(0x2cc0, 7938638198114085268391489312539176659333050685271825569130373368717816392516)
                    mstore(0x2ce0, 21027360223805758920543332255199302526885958692996031273996618516863890168530)
mstore(0x2d00, mload(0x2460))
success := and(eq(staticcall(gas(), 0x7, 0x2cc0, 96, 0x2cc0, 64), 1), success)
mstore(0x2d20, mload(0x2c40))
                    mstore(0x2d40, mload(0x2c60))
mstore(0x2d60, mload(0x2cc0))
                    mstore(0x2d80, mload(0x2ce0))
success := and(eq(staticcall(gas(), 0x6, 0x2d20, 128, 0x2d20, 64), 1), success)
mstore(0x2da0, 13842323424969899911399212089396634628352260349869880063015724906246129151585)
                    mstore(0x2dc0, 2715055756200945721290419885400656258914542427158510214097146727230639095054)
mstore(0x2de0, mload(0x2480))
success := and(eq(staticcall(gas(), 0x7, 0x2da0, 96, 0x2da0, 64), 1), success)
mstore(0x2e00, mload(0x2d20))
                    mstore(0x2e20, mload(0x2d40))
mstore(0x2e40, mload(0x2da0))
                    mstore(0x2e60, mload(0x2dc0))
success := and(eq(staticcall(gas(), 0x6, 0x2e00, 128, 0x2e00, 64), 1), success)
mstore(0x2e80, 8805678210093501049102890135568208984240901564990359625995927096914995404875)
                    mstore(0x2ea0, 9233193782396678155254850884720895496230942499966116302843214733688438676609)
mstore(0x2ec0, mload(0x24a0))
success := and(eq(staticcall(gas(), 0x7, 0x2e80, 96, 0x2e80, 64), 1), success)
mstore(0x2ee0, mload(0x2e00))
                    mstore(0x2f00, mload(0x2e20))
mstore(0x2f20, mload(0x2e80))
                    mstore(0x2f40, mload(0x2ea0))
success := and(eq(staticcall(gas(), 0x6, 0x2ee0, 128, 0x2ee0, 64), 1), success)
mstore(0x2f60, 746700376182334649286729965829255178500658181015598814837630976683873363862)
                    mstore(0x2f80, 11716741857975149671326545138198399637916330363364598742579656425780557508064)
mstore(0x2fa0, mload(0x24c0))
success := and(eq(staticcall(gas(), 0x7, 0x2f60, 96, 0x2f60, 64), 1), success)
mstore(0x2fc0, mload(0x2ee0))
                    mstore(0x2fe0, mload(0x2f00))
mstore(0x3000, mload(0x2f60))
                    mstore(0x3020, mload(0x2f80))
success := and(eq(staticcall(gas(), 0x6, 0x2fc0, 128, 0x2fc0, 64), 1), success)
mstore(0x3040, 12323735649769256187749667127158703795468518906518766984951157404574912528496)
                    mstore(0x3060, 17972873111419869041937068040026163504729973747485318467405904283757100165690)
mstore(0x3080, mload(0x24e0))
success := and(eq(staticcall(gas(), 0x7, 0x3040, 96, 0x3040, 64), 1), success)
mstore(0x30a0, mload(0x2fc0))
                    mstore(0x30c0, mload(0x2fe0))
mstore(0x30e0, mload(0x3040))
                    mstore(0x3100, mload(0x3060))
success := and(eq(staticcall(gas(), 0x6, 0x30a0, 128, 0x30a0, 64), 1), success)
mstore(0x3120, 16702923435396604461005910427953335133544820367474519593492663204474525090929)
                    mstore(0x3140, 7110314827741177873332481155286488914023310741549394500206755450467907680409)
mstore(0x3160, mload(0x2500))
success := and(eq(staticcall(gas(), 0x7, 0x3120, 96, 0x3120, 64), 1), success)
mstore(0x3180, mload(0x30a0))
                    mstore(0x31a0, mload(0x30c0))
mstore(0x31c0, mload(0x3120))
                    mstore(0x31e0, mload(0x3140))
success := and(eq(staticcall(gas(), 0x6, 0x3180, 128, 0x3180, 64), 1), success)
mstore(0x3200, 6908216679392296352612379178956037627945577185583981878288536953415560376029)
                    mstore(0x3220, 3126332429744033662886847277388886781967253511762408192533390887669004171011)
mstore(0x3240, mload(0x2520))
success := and(eq(staticcall(gas(), 0x7, 0x3200, 96, 0x3200, 64), 1), success)
mstore(0x3260, mload(0x3180))
                    mstore(0x3280, mload(0x31a0))
mstore(0x32a0, mload(0x3200))
                    mstore(0x32c0, mload(0x3220))
success := and(eq(staticcall(gas(), 0x6, 0x3260, 128, 0x3260, 64), 1), success)
mstore(0x32e0, 6982863107014912074692656081808597184454402163987780546779730163357621463549)
                    mstore(0x3300, 10286085017235213624878608408505349588214518867633042046551370117785996919011)
mstore(0x3320, mload(0x2540))
success := and(eq(staticcall(gas(), 0x7, 0x32e0, 96, 0x32e0, 64), 1), success)
mstore(0x3340, mload(0x3260))
                    mstore(0x3360, mload(0x3280))
mstore(0x3380, mload(0x32e0))
                    mstore(0x33a0, mload(0x3300))
success := and(eq(staticcall(gas(), 0x6, 0x3340, 128, 0x3340, 64), 1), success)
mstore(0x33c0, mload(0x3c0))
                    mstore(0x33e0, mload(0x3e0))
mstore(0x3400, mload(0x2560))
success := and(eq(staticcall(gas(), 0x7, 0x33c0, 96, 0x33c0, 64), 1), success)
mstore(0x3420, mload(0x3340))
                    mstore(0x3440, mload(0x3360))
mstore(0x3460, mload(0x33c0))
                    mstore(0x3480, mload(0x33e0))
success := and(eq(staticcall(gas(), 0x6, 0x3420, 128, 0x3420, 64), 1), success)
mstore(0x34a0, mload(0x400))
                    mstore(0x34c0, mload(0x420))
mstore(0x34e0, mload(0x2580))
success := and(eq(staticcall(gas(), 0x7, 0x34a0, 96, 0x34a0, 64), 1), success)
mstore(0x3500, mload(0x3420))
                    mstore(0x3520, mload(0x3440))
mstore(0x3540, mload(0x34a0))
                    mstore(0x3560, mload(0x34c0))
success := and(eq(staticcall(gas(), 0x6, 0x3500, 128, 0x3500, 64), 1), success)
mstore(0x3580, mload(0x440))
                    mstore(0x35a0, mload(0x460))
mstore(0x35c0, mload(0x25a0))
success := and(eq(staticcall(gas(), 0x7, 0x3580, 96, 0x3580, 64), 1), success)
mstore(0x35e0, mload(0x3500))
                    mstore(0x3600, mload(0x3520))
mstore(0x3620, mload(0x3580))
                    mstore(0x3640, mload(0x35a0))
success := and(eq(staticcall(gas(), 0x6, 0x35e0, 128, 0x35e0, 64), 1), success)
mstore(0x3660, mload(0x320))
                    mstore(0x3680, mload(0x340))
mstore(0x36a0, mload(0x25c0))
success := and(eq(staticcall(gas(), 0x7, 0x3660, 96, 0x3660, 64), 1), success)
mstore(0x36c0, mload(0x35e0))
                    mstore(0x36e0, mload(0x3600))
mstore(0x3700, mload(0x3660))
                    mstore(0x3720, mload(0x3680))
success := and(eq(staticcall(gas(), 0x6, 0x36c0, 128, 0x36c0, 64), 1), success)
mstore(0x3740, mload(0x760))
                    mstore(0x3760, mload(0x780))
mstore(0x3780, mload(0x27c0))
success := and(eq(staticcall(gas(), 0x7, 0x3740, 96, 0x3740, 64), 1), success)
mstore(0x37a0, mload(0x36c0))
                    mstore(0x37c0, mload(0x36e0))
mstore(0x37e0, mload(0x3740))
                    mstore(0x3800, mload(0x3760))
success := and(eq(staticcall(gas(), 0x6, 0x37a0, 128, 0x37a0, 64), 1), success)
mstore(0x3820, mload(0x7a0))
                    mstore(0x3840, mload(0x7c0))
mstore(0x3860, mload(0x2800))
success := and(eq(staticcall(gas(), 0x7, 0x3820, 96, 0x3820, 64), 1), success)
mstore(0x3880, mload(0x37a0))
                    mstore(0x38a0, mload(0x37c0))
mstore(0x38c0, mload(0x3820))
                    mstore(0x38e0, mload(0x3840))
success := and(eq(staticcall(gas(), 0x6, 0x3880, 128, 0x3880, 64), 1), success)
mstore(0x3900, mload(0x7e0))
                    mstore(0x3920, mload(0x800))
mstore(0x3940, mload(0x2840))
success := and(eq(staticcall(gas(), 0x7, 0x3900, 96, 0x3900, 64), 1), success)
mstore(0x3960, mload(0x3880))
                    mstore(0x3980, mload(0x38a0))
mstore(0x39a0, mload(0x3900))
                    mstore(0x39c0, mload(0x3920))
success := and(eq(staticcall(gas(), 0x6, 0x3960, 128, 0x3960, 64), 1), success)
mstore(0x39e0, mload(0x7a0))
                    mstore(0x3a00, mload(0x7c0))
mstore(0x3a20, mload(0x2660))
success := and(eq(staticcall(gas(), 0x7, 0x39e0, 96, 0x39e0, 64), 1), success)
mstore(0x3a40, mload(0x760))
                    mstore(0x3a60, mload(0x780))
mstore(0x3a80, mload(0x39e0))
                    mstore(0x3aa0, mload(0x3a00))
success := and(eq(staticcall(gas(), 0x6, 0x3a40, 128, 0x3a40, 64), 1), success)
mstore(0x3ac0, mload(0x7e0))
                    mstore(0x3ae0, mload(0x800))
mstore(0x3b00, mload(0x2740))
success := and(eq(staticcall(gas(), 0x7, 0x3ac0, 96, 0x3ac0, 64), 1), success)
mstore(0x3b20, mload(0x3a40))
                    mstore(0x3b40, mload(0x3a60))
mstore(0x3b60, mload(0x3ac0))
                    mstore(0x3b80, mload(0x3ae0))
success := and(eq(staticcall(gas(), 0x6, 0x3b20, 128, 0x3b20, 64), 1), success)
mstore(0x3ba0, mload(0x3960))
                    mstore(0x3bc0, mload(0x3980))
mstore(0x3be0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x3c00, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x3c20, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x3c40, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x3c60, mload(0x3b20))
                    mstore(0x3c80, mload(0x3b40))
mstore(0x3ca0, 0x0011afa7e90e2f41406a57c8aa82586f7861e98c6f44c710fe310eba7dcd1b58)
            mstore(0x3cc0, 0x17fb531546eb6f5baaa69dc28820b47761b7bca247180642897c633b98e35b0e)
            mstore(0x3ce0, 0x2eb1dba1e2c52522d405f93dd92cd3af80dc346eae95774e1cda673dd5d2d425)
            mstore(0x3d00, 0x05a2ee78bddc41035ebaffcda1d4f6a7e5120909ae70ba793a3be8c65555ac8d)
success := and(eq(staticcall(gas(), 0x8, 0x3ba0, 384, 0x3ba0, 32), 1), success)
success := and(eq(mload(0x3ba0), 1), success)
if not(success) { revert(0, 0) }
            return(0, 0)

                }
            }
        }
        